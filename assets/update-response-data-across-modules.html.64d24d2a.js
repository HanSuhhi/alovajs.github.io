import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as p,a as s,b as n,d as t,w as e,f as l,r as c}from"./app.4763b10d.js";const d={},u=s("code",null,"useFetcher",-1),r=s("code",null,"invalidateCache",-1),k=l(`<p>当然有！</p><h2 id="常规用法" tabindex="-1"><a class="header-anchor" href="#常规用法" aria-hidden="true">#</a> 常规用法</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> updateState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;alova&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 正在编辑的todo项</span>
<span class="token keyword">const</span> editingTodo <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;todo1&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token string">&#39;09:00&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span>
  send<span class="token punctuation">,</span>
  onSuccess
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>createTodoPoster<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 提交成功后，固定使第一页的todo数据缓存失效</span>
<span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token comment">// 提交成功后，固定修改第一页的todo数据数据</span>
  <span class="token comment">// 第一个参数为Method实例，第二个为包含原缓存数据的回调函数，该函数需要返回修改后的数据</span>
  <span class="token function">updateState</span><span class="token punctuation">(</span><span class="token function">getTodoList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token parameter">todoList</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> todoList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>id <span class="token operator">===</span> editingTodo<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          <span class="token operator">...</span>item<span class="token punctuation">,</span>
          <span class="token operator">...</span>editingTodo<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> item<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><ol><li>通过<code>updateState</code>更新状态时，如果检测到缓存（内存缓存和持久化缓存）也将会更新新的数据更新缓存。</li><li>只有当使用useRequest、useWatcher发起过请求时，alova才会管理hook返回的状态，原因是响应状态是通过一个Method实例来生成key并保存的，但在未发起请求时Method实例内的url、params、query、headers等参数都还不确定。</li></ol></div><h2 id="高级用法" tabindex="-1"><a class="header-anchor" href="#高级用法" aria-hidden="true">#</a> 高级用法</h2>`,5),v=s("code",null,"updateState",-1),h=s("code",null,"id",-1);function m(b,g){const a=c("RouterLink");return i(),p("div",null,[s("p",null,[n("在上一小节"),t(a,{to:"/zh/response-data-management/invalidate-response-cache.html"},{default:e(()=>[n("主动失效响应缓存")]),_:1}),n("的例子中，当用户点开todo列表中的某一项，进入todo详情页并对它执行了编辑，此时我们希望上一页中的todo列表数据也更新为编辑后的内容，使用"),u,n("和"),r,n("的方式都会重新发起请求，那有没有不需要重新请求的方法呢？")]),k,s("p",null,[n("很多时候我们会有这样的需求，希望在静默提交创建todo项时，立即调用"),v,n("更新数据得以立即展示新的todo项，并且同时还希望在todo项创建完成后再次把"),h,n("更新上去，此时你可以使用"),t(a,{to:"/zh/next-step/delayed-data-update.html"},{default:e(()=>[n("延迟数据更新")]),_:1})])])}const y=o(d,[["render",m],["__file","update-response-data-across-modules.html.vue"]]);export{y as default};
