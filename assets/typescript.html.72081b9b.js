import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as o,a as s,b as n,d as c,f as a,r as l}from"./app.4763b10d.js";const i={},r=a(`<p>在Typescript方面，我们确实花了很大的精力优化，为的就是提供更好的使用体验，我们尽力地使用自动推断类型来减少你定义类型的次数。</p><h2 id="usehooks状态的类型" tabindex="-1"><a class="header-anchor" href="#usehooks状态的类型" aria-hidden="true">#</a> usehooks状态的类型</h2><p>在<code>createAlova</code>创建alova实例时会根据传入的<code>statesHook</code>自动推断出<code>useRequest</code>、<code>useWatcher</code>、<code>useFetcher</code>所创建的状态类型。遗憾的是，目前只支持Vue、React、Svelte三个MVVM库类型，如果你涉及其他库就需要自己编写类型来实现了。</p><p>使用VueHook时：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> vueAlova <span class="token operator">=</span> <span class="token function">createAlova</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">statesHook</span><span class="token operator">:</span> VueHook<span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>
  loading<span class="token punctuation">,</span>  <span class="token comment">// Ref&lt;boolean&gt;</span>
  data<span class="token punctuation">,</span>  <span class="token comment">// Ref&lt;unknown&gt;</span>
  error<span class="token punctuation">,</span>  <span class="token comment">// Ref&lt;Error&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>vuealovaInstance<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&#39;/todo/list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用ReactHook时：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> reactAlova <span class="token operator">=</span> <span class="token function">createAlova</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">statesHook</span><span class="token operator">:</span> ReactHook<span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>
  loading<span class="token punctuation">,</span>  <span class="token comment">// boolean</span>
  data<span class="token punctuation">,</span>  <span class="token comment">// unknown</span>
  error<span class="token punctuation">,</span>  <span class="token comment">// Error</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>reactalovaInstance<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&#39;/todo/list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用SvelteHook时：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> svelteAlova <span class="token operator">=</span> <span class="token function">createAlova</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">statesHook</span><span class="token operator">:</span> SvelteHook<span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>
  loading<span class="token punctuation">,</span>  <span class="token comment">// Readable&lt;boolean&gt;</span>
  data<span class="token punctuation">,</span>  <span class="token comment">// Readable&lt;unknown&gt;</span>
  error<span class="token punctuation">,</span>  <span class="token comment">// Readable&lt;Error&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>sveltealovaInstance<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&#39;/todo/list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可能会发现，data的类型是<code>unknown</code>，因为data需要根据不同接口单独设置类型，接下来我们看下。</p><h2 id="响应数据的类型" tabindex="-1"><a class="header-anchor" href="#响应数据的类型" aria-hidden="true">#</a> 响应数据的类型</h2><p>当你为一个数据接口指定类型时，需要分为两种情况。</p><p>情况1：响应数据不需要再调用<code>transformData</code>转换</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  time<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  done<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> Get <span class="token operator">=</span> alovaInstance<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">Get</span><span class="token generic class-name"><span class="token operator">&lt;</span>Todo<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;/todo/list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>情况2：响应数据需要再调用<code>transformData</code>转换</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  time<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  done<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> Get <span class="token operator">=</span> alovaInstance<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&#39;/todo/list&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// 将类型写到data参数中，而headers会自动推断，可以不用指定类型</span>
  <span class="token function">transformData</span><span class="token punctuation">(</span>data<span class="token operator">:</span> Todo<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> headers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token operator">...</span>item<span class="token punctuation">,</span>
      status<span class="token operator">:</span> item<span class="token punctuation">.</span>done <span class="token operator">?</span> <span class="token string">&#39;已完成&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;未完成&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样data数据就会带有特定的类型了，需要注意的是，响应数据是经过全局响应拦截器转换后的，因此设置类型时也应该设置为转换后的类型。</p><h2 id="根据请求适配器推断的类型" tabindex="-1"><a class="header-anchor" href="#根据请求适配器推断的类型" aria-hidden="true">#</a> 根据请求适配器推断的类型</h2><p>因为<code>alova</code>支持自定义请求适配器，而不同的适配器的请求配置对象、响应对象、响应头都可能不同，因此全局的<code>beforeRequest</code>、<code>responsed</code>拦截器，以及<code>Method</code>实例创建时的配置对象的类型，都会根据请求适配器提供的类型自动推断，我们先来看这几个类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 通用的Method实例的通用配置类型</span>
<span class="token keyword">type</span> <span class="token class-name">CommonMethodConfig</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  <span class="token keyword">readonly</span> method<span class="token operator">:</span> MethodType<span class="token punctuation">,</span>
  data<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">|</span> FormData <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// \`Method\`实例创建时的配置对象的类型</span>
<span class="token keyword">type</span> <span class="token class-name">AlovaMethodConfig<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">RC</span><span class="token punctuation">,</span> <span class="token constant">RH</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 以下为创建Method实例时指定的配置对象</span>
  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>

  <span class="token comment">// url中的参数，一个对象</span>
  params<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>

  <span class="token comment">// 请求头，一个对象</span>
  headers<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>

  <span class="token comment">// 静默请求，onSuccess将会立即触发，如果请求失败则会保存到缓存中后续继续轮询请求</span>
  silent<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>

  <span class="token comment">// 当前中断时间</span>
  timeout<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>

  <span class="token comment">// 响应数据在缓存时间内则不再次请求。get、head请求默认保鲜5分钟（300000毫秒），其他请求默认不缓存</span>
  localCache<span class="token operator">?</span><span class="token operator">:</span> numbe <span class="token operator">|</span> <span class="token punctuation">{</span>
    expire<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    mode<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    tag<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// 是否启用下载进度信息，启用后每次请求progress才会有进度值，否则一致为0，默认不开启</span>
  enableDownload<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>

  <span class="token comment">// 是否启用上传进度信息，启用后每次请求progress才会有进度值，否则一致为0，默认不开启</span>
  enableUpload<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>

  <span class="token comment">// 响应数据转换，转换后的数据将转换为data状态，没有转换数据则直接用响应数据作为data状态</span>
  transformData<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> headers<span class="token operator">:</span> <span class="token constant">RH</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">R</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token operator">&amp;</span> <span class="token constant">RC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这边涉及到的<code>RC</code>、<code>RH</code>，以及这边未出现的<code>RE</code>都是通过请求适配器推断的，它们分别表示请求配置对象类型、响应头对象类型、响应类型，如果你使用<code>GlobalFetch</code>时，他们的类型分别会被推断为：</p><ol><li><code>RC</code>为fetch api的请求配置对象<code>RequestInit</code>;</li><li><code>RH</code>为响应头对象<code>Headers</code>;</li><li><code>RE</code>为响应对象<code>Response</code>;</li></ol><p>知道了这些后我们继续看下面的类型定义。</p><h2 id="全局请求前拦截器参数类型" tabindex="-1"><a class="header-anchor" href="#全局请求前拦截器参数类型" aria-hidden="true">#</a> 全局请求前拦截器参数类型</h2><p>全局请求前拦截器<code>beforeRequest</code>接收一个汇总的请求配置，它的类型为：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">AlovaRequestAdapterConfig<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">RC</span><span class="token punctuation">,</span> <span class="token constant">RH</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> 
  CommonMethodConfig
  <span class="token operator">&amp;</span> AlovaMethodConfig<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">RC</span><span class="token punctuation">,</span> <span class="token constant">RH</span><span class="token operator">&gt;</span>
  <span class="token operator">&amp;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 会保证headers、params参数是一个对象</span>
    headers<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    params<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="全局响应拦截器参数类型" tabindex="-1"><a class="header-anchor" href="#全局响应拦截器参数类型" aria-hidden="true">#</a> 全局响应拦截器参数类型</h2><p>全局响应拦截器<code>responsed</code>接收一个响应对象，它的类型为响应对象<code>RE</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ResponsedHandler<span class="token operator">&lt;</span><span class="token constant">RE</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>response<span class="token operator">:</span> <span class="token constant">RE</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当请求适配器使用<code>GlobalFetch</code>时，<code>RE</code>将自动推断为<code>Response</code>类型。</p><h2 id="method配置对象的类型" tabindex="-1"><a class="header-anchor" href="#method配置对象的类型" aria-hidden="true">#</a> Method配置对象的类型</h2><p>Method配置对象的类型为上面提高的 <a href="#%E6%A0%B9%E6%8D%AE%E8%AF%B7%E6%B1%82%E9%80%82%E9%85%8D%E5%99%A8%E6%8E%A8%E6%96%AD%E7%9A%84%E7%B1%BB%E5%9E%8B">AlovaMethodConfig</a>，它包含通用的配置参数和根据请求适配器推断出的<code>RC</code>的并集。当请求适配器使用<code>GlobalFetch</code>时，<code>RC</code>将自动推断为<code>RequestInit</code>类型。</p><h2 id="请求适配器类型" tabindex="-1"><a class="header-anchor" href="#请求适配器类型" aria-hidden="true">#</a> 请求适配器类型</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Progress</span> <span class="token punctuation">{</span>
  total<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  <span class="token comment">// 总量</span>
  loaded<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// 已加载量</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">AlovaRequestAdapter<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">RC</span><span class="token punctuation">,</span> <span class="token constant">RE</span><span class="token punctuation">,</span> <span class="token constant">RH</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>adapterConfig<span class="token operator">:</span> AlovaRequestAdapterConfig<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">RC</span><span class="token punctuation">,</span> <span class="token constant">RH</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">response</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">RE</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">headers</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">RH</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  onDownload<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span>total<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> loaded<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
  onUpload<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span>total<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> loaded<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
  <span class="token function-variable function">abort</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，如果需要在<code>alova</code>中自动推断<code>RC</code>、<code>RE</code>、<code>RH</code>类型，那么自定义请求适配器上不应该指定任何泛型，且需要手动指定<code>RC</code>、<code>RE</code>、<code>RH</code>的类型，否则会导致类型推断错误。</p>`,35),u=s("code",null,"GlobalFetch",-1),d={href:"https://github.com/JOU-amjs/alova/blob/main/src/predefine/GlobalFetch.ts",target:"_blank",rel:"noopener noreferrer"},k=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">GlobalFetch</span> <span class="token operator">=</span> <span class="token punctuation">(</span>defaultRequestInit<span class="token operator">?</span><span class="token operator">:</span> RequestInit<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> 
  <span class="token punctuation">(</span>adapterConfig<span class="token operator">:</span> AlovaRequestAdapterConfig<span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span> RequestInit<span class="token punctuation">,</span> Headers<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">response</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Response<span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token function-variable function">headers</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Headers<span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token function-variable function">onDownload</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span>total<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> loaded<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token function-variable function">abort</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义states-hook的类型" tabindex="-1"><a class="header-anchor" href="#自定义states-hook的类型" aria-hidden="true">#</a> 自定义States Hook的类型</h2><p>敬请期待...</p>`,3);function v(m,b){const t=l("ExternalLinkIcon");return p(),o("div",null,[r,s("p",null,[n("以"),u,n("为例。"),s("a",d,[n("GlobalFetch源码点此查看"),c(t)])]),k])}const f=e(i,[["render",v],["__file","typescript.html.vue"]]);export{f as default};
