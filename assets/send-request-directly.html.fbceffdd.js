import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,f as e}from"./app.4763b10d.js";const t={},p=e(`<div class="custom-container info"><p class="custom-container-title">提示</p><p>v1.2.0+</p></div><p>有时候我们只想要简单地发出请求，并不需要各种状态，此时可以直接调用<code>Method</code>实例的<code>send</code>函数即可，它将返回一个带返回参数的<code>Promise</code>对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取全局的用户信息</span>
<span class="token keyword">const</span> globalUserGetter <span class="token operator">=</span> alovaInstance<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&#39;/global/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">userId</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">transformData</span><span class="token punctuation">(</span><span class="token parameter">rawData<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> rawData<span class="token punctuation">,</span>
      <span class="token literal-property property">respHeaders</span><span class="token operator">:</span> headers
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// send方法接收一个参数，表示是否强制请求，默认为false</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> respHeaders <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> globalUserGetter<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用数据...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><ol><li>返回的响应数据也会依次被全局的<code>responsed</code>和当前<code>Method</code>实例的<code>transformData</code>处理；</li><li>缓存机制依然有效，如果命中缓存也会返回缓存数据，此时可以在<code>send</code>方法中传入<code>true</code>来强制发起请求；</li></ol></div>`,4),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","send-request-directly.html.vue"]]);export{d as default};
