"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Overview","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/overview/index","docId":"overview/index"},{"type":"link","label":"RSM","href":"/overview/RSM","docId":"overview/RSM"},{"type":"link","label":"Install","href":"/overview/installation","docId":"overview/installation"}],"href":"/category/overview"},{"type":"category","label":"Examples","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"page initialization request","href":"/example/init-page","docId":"example/init-page"},{"type":"link","label":"form submission","href":"/example/submit-form","docId":"example/submit-form"},{"type":"link","label":"Conditional Search","href":"/example/condition-search","docId":"example/condition-search"},{"type":"link","label":"Response Cache - Memory Mode","href":"/example/memory-cache","docId":"example/memory-cache"},{"type":"link","label":"Response Cache - Cache Placeholder Mode","href":"/example/storage-placeholder","docId":"example/storage-placeholder"},{"type":"link","label":"Response Caching - Recovery Mode","href":"/example/storage-restore","docId":"example/storage-restore"},{"type":"link","label":"Data Prefetch","href":"/example/prefetch","docId":"example/prefetch"},{"type":"link","label":"Safer optimistic update","href":"/example/safer-ptimistic-update","docId":"example/safer-ptimistic-update"},{"type":"link","label":"drop down to load more","href":"/example/load-more","docId":"example/load-more"},{"type":"link","label":"list of page numbers","href":"/example/paginated-list","docId":"example/paginated-list"}],"href":"/category/examples"},{"type":"category","label":"Getting Started","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"start","href":"/getting-started/start","docId":"getting-started/start"},{"type":"link","label":"request method instance","href":"/getting-started/request-method-instance","docId":"getting-started/request-method-instance"},{"type":"link","label":"Cache Mode","href":"/getting-started/response-cache","docId":"getting-started/response-cache"}],"href":"/category/getting-started"},{"type":"category","label":"Request at the right time","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"send request","href":"/request-timing/use-request","docId":"request-timing/use-request"},{"type":"link","label":"state change request","href":"/request-timing/use-watcher","docId":"request-timing/use-watcher"},{"type":"link","label":"fetch data","href":"/request-timing/use-fetcher","docId":"request-timing/use-fetcher"}],"href":"/category/request-at-the-right-time"},{"type":"category","label":"Response data management","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Transform response data","href":"/response-data-management/transform-response-data","docId":"response-data-management/transform-response-data"},{"type":"link","label":"Actively Invalidate Response Cache","href":"/response-data-management/invalidate-response-cache","docId":"response-data-management/invalidate-response-cache"},{"type":"link","label":"Update response data across pages/modules","href":"/response-data-management/update-response-data-across-modules","docId":"response-data-management/update-response-data-across-modules"},{"type":"link","label":"Manually update the cache","href":"/response-data-management/custom-set-cache-data","docId":"response-data-management/custom-set-cache-data"}],"href":"/category/response-data-management"},{"type":"category","label":"Next step","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Detailed request method","href":"/next-step/request-method-details","docId":"next-step/request-method-details"},{"type":"link","label":"Send request directly","href":"/next-step/send-request-directly","docId":"next-step/send-request-directly"},{"type":"link","label":"Method instance matcher","href":"/next-step/method-instance-matcher","docId":"next-step/method-instance-matcher"},{"type":"link","label":"Parallel Requests","href":"/next-step/parallel-request","docId":"next-step/parallel-request"},{"type":"link","label":"Serial Request","href":"/next-step/serial-request","docId":"next-step/serial-request"},{"type":"link","label":"Download/Upload progress","href":"/next-step/download-upload-progress","docId":"next-step/download-upload-progress"},{"type":"link","label":"Silent/Offline submit","href":"/next-step/silent-offline-submit","docId":"next-step/silent-offline-submit"},{"type":"link","label":"Delay data update","href":"/next-step/delayed-data-update","docId":"next-step/delayed-data-update"}],"href":"/category/next-step"},{"type":"category","label":"Advanced","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Custom Request Adapter","href":"/advanced/custom-http-adapter","docId":"advanced/custom-http-adapter"},{"type":"link","label":"Custom States Hook","href":"/advanced/custom-stateshook","docId":"advanced/custom-stateshook"},{"type":"link","label":"Custom Storage Adapter","href":"/advanced/custom-storage-adapter","docId":"advanced/custom-storage-adapter"},{"type":"link","label":"Response Status Edit Tracking","href":"/advanced/response-states-track","docId":"advanced/response-states-track"},{"type":"link","label":"Typescript","href":"/advanced/typescript","docId":"advanced/typescript"}],"href":"/category/advanced"},{"type":"category","label":"Extensions","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"extend hooks","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"usePagination","href":"/extension/alova-hooks/usePagination","docId":"extension/alova-hooks/usePagination"},{"type":"link","label":"useIntervalRequest","href":"/extension/alova-hooks/useIntervalRequest","docId":"extension/alova-hooks/useIntervalRequest"},{"type":"link","label":"useWindowFocusedRequest","href":"/extension/alova-hooks/useWindowFocusedRequest","docId":"extension/alova-hooks/useWindowFocusedRequest"}],"href":"/category/extend-hooks"},{"type":"link","label":"mock data","href":"/extension/alova-mock","docId":"extension/alova-mock"},{"type":"link","label":"Taro Adapter","href":"/extension/alova-adapter-taro","docId":"extension/alova-adapter-taro"},{"type":"link","label":"Uniapp Adapter","href":"/extension/alova-adapter-uniapp","docId":"extension/alova-adapter-uniapp"}],"href":"/category/extensions"},{"type":"category","label":"Others","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Hide recommend Tips","href":"/others/hide-recommend-tips","docId":"others/hide-recommend-tips"}],"href":"/category/others"}]},"docs":{"advanced/custom-http-adapter":{"id":"advanced/custom-http-adapter","title":"Custom Request Adapter","description":"Remember how you created an Alova instance? When calling createAlova, you must pass in requestAdapter, which is the request adapter of alova. Imagine that when alova runs in a non-browser environment (may be a client, a small program), fetch api may not If it is available again, then we need to replace a request adapter that supports the current environment.","sidebar":"tutorialSidebar"},"advanced/custom-stateshook":{"id":"advanced/custom-stateshook","title":"Custom States Hook","description":"Remember the statesHook you passed in when calling createAlova? It will decide which MVVM library status you return when you request, such as VueHook in vue project, ReactHook in react project, SvelteHook in svelte project, currently only these three libraries are supported. In most cases you should not use this feature, but if you need to adapt to more MVVM libraries that we don\'t support yet, you need to custom write statesHook.","sidebar":"tutorialSidebar"},"advanced/custom-storage-adapter":{"id":"advanced/custom-storage-adapter","title":"Custom Storage Adapter","description":"Alova involves multiple functions that require data persistence, such as persistent caching, silent commit, and offline commit. By default, alova will use localStorage to store persistent data, but considering the non-browser environment, it also supports customization.","sidebar":"tutorialSidebar"},"advanced/response-states-track":{"id":"advanced/response-states-track","title":"Response Status Edit Tracking","description":"Coming soon...","sidebar":"tutorialSidebar"},"advanced/typescript":{"id":"advanced/typescript","title":"Typescript","description":"In terms of Typescript, we really put a lot of effort into optimization in order to provide a better user experience, and we try our best to use automatically inferred types to reduce the trouble of defining types.","sidebar":"tutorialSidebar"},"example/condition-search":{"id":"example/condition-search","title":"Conditional Search","description":"The example uses vue3 as an example, but you can also use alova in react and svelte. For details, please read the Getting Started Guide;","sidebar":"tutorialSidebar"},"example/init-page":{"id":"example/init-page","title":"page initialization request","description":"The example uses vue3 as an example, but you can also use alova in react and svelte. For details, please read the Getting Started Guide;","sidebar":"tutorialSidebar"},"example/load-more":{"id":"example/load-more","title":"drop down to load more","description":"The example uses vue3 as an example, but you can also use alova in react and svelte. For details, please read the Getting Started Guide;","sidebar":"tutorialSidebar"},"example/memory-cache":{"id":"example/memory-cache","title":"Response Cache - Memory Mode","description":"The example uses vue3 as an example, but you can also use alova in react and svelte. For details, please read the Getting Started Guide;","sidebar":"tutorialSidebar"},"example/paginated-list":{"id":"example/paginated-list","title":"list of page numbers","description":"The example uses vue3 as an example, but you can also use alova in react and svelte. For details, please read the Getting Started Guide;","sidebar":"tutorialSidebar"},"example/prefetch":{"id":"example/prefetch","title":"Data Prefetch","description":"The example uses vue3 as an example, but you can also use alova in react and svelte. For details, please read the Getting Started Guide;","sidebar":"tutorialSidebar"},"example/safer-ptimistic-update":{"id":"example/safer-ptimistic-update","title":"Safer optimistic update","description":"The example uses vue3 as an example, but you can also use alova in react and svelte. For details, please read the Getting Started Guide;","sidebar":"tutorialSidebar"},"example/storage-placeholder":{"id":"example/storage-placeholder","title":"Response Cache - Cache Placeholder Mode","description":"The example uses vue3 as an example, but you can also use alova in react and svelte. For details, please read the Getting Started Guide;","sidebar":"tutorialSidebar"},"example/storage-restore":{"id":"example/storage-restore","title":"Response Caching - Recovery Mode","description":"The example uses vue3 as an example, but you can also use alova in react and svelte. For details, please read the Getting Started Guide;","sidebar":"tutorialSidebar"},"example/submit-form":{"id":"example/submit-form","title":"form submission","description":"The example uses vue3 as an example, but you can also use alova in react and svelte. For details, please read the Getting Started Guide;","sidebar":"tutorialSidebar"},"extension/alova-adapter-taro":{"id":"extension/alova-adapter-taro","title":"Taro Adapter","description":"Install","sidebar":"tutorialSidebar"},"extension/alova-adapter-uniapp":{"id":"extension/alova-adapter-uniapp","title":"Uniapp Adapter","description":"Install","sidebar":"tutorialSidebar"},"extension/alova-hooks/useIntervalRequest":{"id":"extension/alova-hooks/useIntervalRequest","title":"useIntervalRequest","description":"Install","sidebar":"tutorialSidebar"},"extension/alova-hooks/usePagination":{"id":"extension/alova-hooks/usePagination","title":"usePagination","description":"Install","sidebar":"tutorialSidebar"},"extension/alova-hooks/useWindowFocusedRequest":{"id":"extension/alova-hooks/useWindowFocusedRequest","title":"useWindowFocusedRequest","description":"Install","sidebar":"tutorialSidebar"},"extension/alova-mock":{"id":"extension/alova-mock","title":"mock data","description":"This mock plug-in is an alova request adapter. Different from the traditional Proxy form, you can control the scope of use of mock data. You can control the global scope, a group of interface scopes, and even the enabling and use of a certain interface. Disabled, which is very useful in our actual business scenarios. Each iteration will add or modify a set of interfaces. We hope that the previous functions will still follow the developed interfaces, and let the new or modified interfaces Taking the simulation data, at this time, each developer can group the interfaces involved in this iteration into a group, and turn them on or off.","sidebar":"tutorialSidebar"},"getting-started/request-method-instance":{"id":"getting-started/request-method-instance","title":"request method instance","description":"In alova, each request corresponds to a method instance representation, which describes the url, request header, request parameters of a request, and request behavior parameters such as response data processing, cache processing data, etc., but it does not actually send a request .","sidebar":"tutorialSidebar"},"getting-started/response-cache":{"id":"getting-started/response-cache","title":"Cache Mode","description":"Cached mode can better utilize server-side data multiple times, instead of sending a request to fetch data every time it is requested. alova provides three cache modes to meet different cache scenarios, namely memory mode, cache occupancy mode, and recovery mode. The cache mode can be set at different granularities such as global or request level. When set globally, all Method instances created by the same alova instance inherit the setting.","sidebar":"tutorialSidebar"},"getting-started/start":{"id":"getting-started/start","title":"start","description":"In the next getting started guide, we will take todo as an example to explain alova around the needs of getting todo lists on different dates, viewing todo details, and creating, editing, and deleting items. . let\'s start!","sidebar":"tutorialSidebar"},"next-step/delayed-data-update":{"id":"next-step/delayed-data-update","title":"Delay data update","description":"You may have the following requirements:  When creating a todo item, set it to silent submission, and immediately call updateState to update the todo list, so that although the newly added todo item can be seen on the interface immediately, but there is no id, Therefore this todo item cannot be edited or deleted without re-requesting the full data.","sidebar":"tutorialSidebar"},"next-step/download-upload-progress":{"id":"next-step/download-upload-progress","title":"Download/Upload progress","description":"By default, upload and download progress is turned off. You need to enable upload and download progress information on the specified Method instance, as follows:","sidebar":"tutorialSidebar"},"next-step/method-instance-matcher":{"id":"next-step/method-instance-matcher","title":"Method instance matcher","description":"When we finish processing some business, we need to call invalidateCache, setCacheData, updateState and fetch to invalidate cache, update cache, update state across pages, or re-pull data, there are generally two scenarios :","sidebar":"tutorialSidebar"},"next-step/parallel-request":{"id":"next-step/parallel-request","title":"Parallel Requests","description":"Simple parallel requests only need to call multiple useRequest at the same time.","sidebar":"tutorialSidebar"},"next-step/request-method-details":{"id":"next-step/request-method-details","title":"Detailed request method","description":"The alova instance object provides abstract objects for seven request methods, including GET, POST, PUT, DELETE, HEAD, OPTIONS, and PATCH. For simplicity and ease of use, alova borrows the same parameter structure as axios.","sidebar":"tutorialSidebar"},"next-step/send-request-directly":{"id":"next-step/send-request-directly","title":"Send request directly","description":"v1.2.0+","sidebar":"tutorialSidebar"},"next-step/serial-request":{"id":"next-step/serial-request","title":"Serial Request","description":"Let the first request be sent automatically, and the second request will be triggered in the onSuccess callback of the first request to complete the serial request. The serial request can be completed by the following writing method:","sidebar":"tutorialSidebar"},"next-step/silent-offline-submit":{"id":"next-step/silent-offline-submit","title":"Silent/Offline submit","description":"Suppose you want to further improve the experience of creating todo items, and let the user click the Create button to take effect immediately, without feeling the process of submitting to the server, you can consider using the silent submission method.","sidebar":"tutorialSidebar"},"others/hide-recommend-tips":{"id":"others/hide-recommend-tips","title":"Hide recommend Tips","description":"Alova can cooperate with the extension library to obtain a better development experience. In order to allow more developers to obtain a better development experience, the extension of alova will be recommended in the console when using it.","sidebar":"tutorialSidebar"},"overview/index":{"id":"overview/index","title":"Overview","description":"What is alova","sidebar":"tutorialSidebar"},"overview/installation":{"id":"overview/installation","title":"Install","description":"When using alova, make sure the following version","sidebar":"tutorialSidebar"},"overview/RSM":{"id":"overview/RSM","title":"RSM","description":"What is request scene management","sidebar":"tutorialSidebar"},"request-timing/use-fetcher":{"id":"request-timing/use-fetcher","title":"fetch data","description":"When you have the following needs:","sidebar":"tutorialSidebar"},"request-timing/use-request":{"id":"request-timing/use-request","title":"send request","description":"Next, let\'s take a look at how to actually make a request. In alova, useRequest, useWatcher, and useFetcher three use hook are provided to realize the request timing, and they control when the request should be issued. At the same time, it will create and maintain stateful request-related data for us, such as loading, data, error, etc. There is no need to maintain these states independently. Let\'s learn about them below.","sidebar":"tutorialSidebar"},"request-timing/use-watcher":{"id":"request-timing/use-watcher","title":"state change request","description":"useWatcher is used to monitor the specified state change and send a request immediately. It is mainly used in scenarios where the data is updated with the state change, such as paging, data filtering, and fuzzy search.","sidebar":"tutorialSidebar"},"response-data-management/custom-set-cache-data":{"id":"response-data-management/custom-set-cache-data","title":"Manually update the cache","description":"Some service interfaces support batch request data, which means that it is always composed of indeterminate sets of response data. When we want to batch request data when initializing the page, and then request only a single piece of data in the interaction, it will cause caching penetration problem.","sidebar":"tutorialSidebar"},"response-data-management/invalidate-response-cache":{"id":"response-data-management/invalidate-response-cache","title":"Actively Invalidate Response Cache","description":"There is such a scenario, when the user clicks on an item in the todo list, enters the todo details page and edits it, at this time we hope that the todo list data in the previous page is also updated to the edited content, usually The practice is to trigger the content update of the previous page through an event, which increases the maintenance cost. And alova provides 3 ways to achieve this purpose very elegantly:","sidebar":"tutorialSidebar"},"response-data-management/transform-response-data":{"id":"response-data-management/transform-response-data","title":"Transform response data","description":"When the response data structure cannot directly meet the front-end requirements, we can set the transformData hook function for the method instance to convert the response data into the required structure, and the data will be used as the value of the data state after conversion.","sidebar":"tutorialSidebar"},"response-data-management/update-response-data-across-modules":{"id":"response-data-management/update-response-data-across-modules","title":"Update response data across pages/modules","description":"In the example in the previous section [Active Invalidate Response Cache] (../response-data-management/invalidate-response-cache ), when the user clicks on an item in the todo list, enter the todo details page and execute it At this time, we hope that the todo list data in the previous page will also be updated to the edited content. Using the methods of useFetcher and invalidateCache will re-initiate the request. Is there any method that does not require re-request?","sidebar":"tutorialSidebar"}}}')}}]);