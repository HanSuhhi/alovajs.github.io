"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[1425],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),h=r,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||s;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),r=n(6010);const s="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,o),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>h});var a=n(7462),r=n(7294),s=n(6010),o=n(2389),i=n(7392),l=n(7094),c=n(2466);const u="tabList__CuJ",d="tabItem_LNqP";function p(e){var t;const{lazy:n,block:o,defaultValue:p,values:h,groupId:m,className:v}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=h??f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,i.l)(g,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===p?p:p??(null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)??f[0].props.value;if(null!==y&&!g.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:w}=(0,l.U)(),[T,N]=(0,r.useState)(y),O=[],{blockElementScrollPositionUntilNextRender:x}=(0,c.o5)();if(null!=m){const e=k[m];null!=e&&e!==T&&g.some((t=>t.value===e))&&N(e)}const C=e=>{const t=e.currentTarget,n=O.indexOf(t),a=g[n].value;a!==T&&(x(t),N(a),null!=m&&w(m,String(a)))},P=e=>{var t;let n=null;switch(e.key){case"Enter":C(e);break;case"ArrowRight":{const t=O.indexOf(e.currentTarget)+1;n=O[t]??O[0];break}case"ArrowLeft":{const t=O.indexOf(e.currentTarget)-1;n=O[t]??O[O.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,s.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":o},v)},g.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>O.push(e),onKeyDown:P,onClick:C},o,{className:(0,s.Z)("tabs__item",d,null==o?void 0:o.className,{"tabs__item--active":T===t})}),n??t)}))),n?(0,r.cloneElement)(f.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function h(e){const t=(0,o.Z)();return r.createElement(p,(0,a.Z)({key:String(t)},e))}},8087:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var a=n(7462),r=(n(7294),n(3905)),s=n(5488),o=n(5162);const i={title:"Actively Invalidate Response Cache",sidebar_position:20},l=void 0,c={unversionedId:"response-data-management/invalidate-response-cache",id:"response-data-management/invalidate-response-cache",title:"Actively Invalidate Response Cache",description:"There is such a scenario, when the user clicks on an item in the todo list, enters the todo details page and edits it, at this time we hope that the todo list data in the previous page is also updated to the edited content, usually The practice is to trigger the content update of the previous page through an event, which increases the maintenance cost. And alova provides 3 ways to achieve this purpose very elegantly:",source:"@site/docs/05-response-data-management/02-invalidate-response-cache.md",sourceDirName:"05-response-data-management",slug:"/response-data-management/invalidate-response-cache",permalink:"/response-data-management/invalidate-response-cache",draft:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/05-response-data-management/02-invalidate-response-cache.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{title:"Actively Invalidate Response Cache",sidebar_position:20},sidebar:"tutorialSidebar",previous:{title:"Transform response data",permalink:"/response-data-management/transform-response-data"},next:{title:"Update response data across pages/modules",permalink:"/response-data-management/update-response-data-across-modules"}},u={},d=[],p={toc:d};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"There is such a scenario, when the user clicks on an item in the todo list, enters the todo details page and edits it, at this time we hope that the todo list data in the previous page is also updated to the edited content, usually The practice is to trigger the content update of the previous page through an event, which increases the maintenance cost. And ",(0,r.kt)("inlineCode",{parentName:"p"},"alova")," provides 3 ways to achieve this purpose very elegantly:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Use ",(0,r.kt)("inlineCode",{parentName:"li"},"useFetcher")," to immediately re-request the latest data, which has been covered in the above section;"),(0,r.kt)("li",{parentName:"ol"},"Manually update the cache, which will be explained in detail in the next section;"),(0,r.kt)("li",{parentName:"ol"},"Invalidate the cache of this response, when the request is made again, the data will be re-requested due to cache invalidation. That's what this section is about.")),(0,r.kt)("p",null,"Now we try to achieve this requirement by way of cache invalidation."),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"1",label:"vue",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<template>\n  <button @click=\"send\">Send request</button>\n</template>\n\n<script setup>\n  import { invalidateCache } from 'alova';\n\n  const getTodoList = currentPage => {\n    return alovaInstance.Get('/tood/list', {\n      params: {\n        currentPage,\n        pageSize: 10\n      }\n    });\n  };\n\n  const {\n    // ...\n    send,\n    onSuccess\n  } = useRequest(createTodoPoster, { immediate: false });\n\n  // highlight-start\n  // After the submission is successful, the todo data cache of the first page is fixed to be invalidated\n  onSuccess(() => {\n    invalidateCache(getTodoList(1));\n  });\n  // highlight-end\n<\/script>\n"))),(0,r.kt)(o.Z,{value:"2",label:"react",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { invalidateCache } from 'alova';\n\nconst getTodoList = currentPage => {\n  return alovaInstance.Get('/tood/list', {\n    params: {\n      currentPage,\n      pageSize: 10\n    }\n  });\n};\n\nconst App = () => {\n  const {\n    // ...\n    send,\n    onSuccess\n  } = useRequest(createTodoPoster, { immediate: false });\n\n  // highlight-start\n  // After the submission is successful, the todo data cache of the first page is fixed to be invalidated\n  onSuccess(() => {\n    invalidateCache(getTodoList(1));\n  });\n  // highlight-end\n\n  return <button onClick={send}>send request</button>;\n};\n"))),(0,r.kt)(o.Z,{value:"3",label:"svelte",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<script>\n  import { invalidateCache } from 'alova';\n\n  const getTodoList = currentPage => {\n    return alovaInstance.Get('/tood/list', {\n      params: {\n        currentPage,\n        pageSize: 10\n      }\n    });\n  };\n\n  const {\n    // ...\n    send,\n    onSuccess\n  } = useRequest(createTodoPoster, { immediate: false });\n\n  // highlight-start\n  // After the submission is successful, the todo data cache of the first page is fixed to be invalidated\n  onSuccess(() => {\n    invalidateCache(getTodoList(1));\n  });\n  // highlight-end\n<\/script>\n\n<button on:click=\"{send}\">Send request</button>\n")))),(0,r.kt)("p",null,"Its function is far more than that, we can also achieve any number of, or even all, cache invalidation by setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"Method")," instance matcher."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const getTodoList = currentPage => {\n  return alovaInstance.Get('/tood/list', {\n    // Note: The name attribute is set to filter out the required Method instance when the Method instance cannot be specified directly\n    name: 'todoList',\n    params: {\n      currentPage,\n      pageSize: 10\n    }\n  });\n};\n\nconst {\n  // ...\n  send,\n  onSuccess\n} = useRequest(createTodoPoster, { immediate: false });\n// After the submission is successful, the todo data cache of the first page is fixed to be invalidated\nonSuccess(() => {\n  // highlight-start\n  // invalidate all response caches named todoList\n  invalidateCache({\n    name: 'todoList',\n    filter: (method, index, ary) => {\n      // The response cache for the first 5 Method instances named todoList will be invalidated\n      return index < 5;\n    }\n  });\n  // highlight-end\n\n  // highlight-start\n  // When no parameters are passed, invalidate all response caches\n  invalidateCache();\n  // highlight-end\n});\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For more usage of ",(0,r.kt)("inlineCode",{parentName:"p"},"Method")," instance matcher, see ",(0,r.kt)("a",{parentName:"p",href:"../next-step/method-instance-matcher"},"Method instance matcher"))))}h.isMDXComponent=!0}}]);