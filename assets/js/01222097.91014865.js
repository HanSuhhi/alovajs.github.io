"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[9085],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),i=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=i(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),c=i(n),m=o,v=c["".concat(s,".").concat(m)]||c[m]||u[m]||l;return n?a.createElement(v,r(r({ref:t},p),{},{components:n})):a.createElement(v,r({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,r=new Array(l);r[0]=c;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d.mdxType="string"==typeof e?e:o,r[1]=d;for(var i=2;i<l;i++)r[i]=n[i];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(7294),o=n(6010);const l="tabItem_Ymn6";function r(e){let{children:t,hidden:n,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(l,r),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(7462),o=n(7294),l=n(6010),r=n(2389),d=n(7392),s=n(7094),i=n(2466);const p="tabList__CuJ",u="tabItem_LNqP";function c(e){var t;const{lazy:n,block:r,defaultValue:c,values:m,groupId:v,className:g}=e,b=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),w=m??b.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),f=(0,d.l)(w,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const h=null===c?c:c??(null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)??b[0].props.value;if(null!==h&&!w.some((e=>e.value===h)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${h}" but none of its children has the corresponding value. Available values are: ${w.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:k}=(0,s.U)(),[N,T]=(0,o.useState)(h),x=[],{blockElementScrollPositionUntilNextRender:O}=(0,i.o5)();if(null!=v){const e=y[v];null!=e&&e!==N&&w.some((t=>t.value===e))&&T(e)}const E=e=>{const t=e.currentTarget,n=x.indexOf(t),a=w[n].value;a!==N&&(O(t),T(a),null!=v&&k(v,String(a)))},C=e=>{var t;let n=null;switch(e.key){case"Enter":E(e);break;case"ArrowRight":{const t=x.indexOf(e.currentTarget)+1;n=x[t]??x[0];break}case"ArrowLeft":{const t=x.indexOf(e.currentTarget)-1;n=x[t]??x[x.length-1];break}}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,l.Z)("tabs-container",p)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":r},g)},w.map((e=>{let{value:t,label:n,attributes:r}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>x.push(e),onKeyDown:C,onClick:E},r,{className:(0,l.Z)("tabs__item",u,null==r?void 0:r.className,{"tabs__item--active":N===t})}),n??t)}))),n?(0,o.cloneElement)(b.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function m(e){const t=(0,r.Z)();return o.createElement(c,(0,a.Z)({key:String(t)},e))}},5340:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>d,metadata:()=>i,toc:()=>u});var a=n(7462),o=(n(7294),n(3905)),l=n(5488),r=n(5162);const d={title:"Download/Upload progress",sidebar_position:60},s=void 0,i={unversionedId:"next-step/download-upload-progress",id:"next-step/download-upload-progress",title:"Download/Upload progress",description:"By default, upload and download progress is turned off. You need to enable upload and download progress information on the specified Method instance, as follows:",source:"@site/docs/06-next-step/06-download-upload-progress.md",sourceDirName:"06-next-step",slug:"/next-step/download-upload-progress",permalink:"/next-step/download-upload-progress",draft:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/06-next-step/06-download-upload-progress.md",tags:[],version:"current",sidebarPosition:60,frontMatter:{title:"Download/Upload progress",sidebar_position:60},sidebar:"tutorialSidebar",previous:{title:"Serial Request",permalink:"/next-step/serial-request"},next:{title:"Silent/Offline submit",permalink:"/next-step/silent-offline-submit"}},p={},u=[{value:"download progress",id:"download-progress",level:2},{value:"upload progress",id:"upload-progress",level:2},{value:"upload/download status type",id:"uploaddownload-status-type",level:2}],c={toc:u};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"By default, upload and download progress is turned off. You need to enable upload and download progress information on the specified ",(0,o.kt)("inlineCode",{parentName:"p"},"Method")," instance, as follows:"),(0,o.kt)("h2",{id:"download-progress"},"download progress"),(0,o.kt)("p",null,"First set ",(0,o.kt)("inlineCode",{parentName:"p"},"enableDownload")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", which means that the download progress is enabled, and then receive the ",(0,o.kt)("inlineCode",{parentName:"p"},"downloading")," responsive state in the three use hooks ",(0,o.kt)("inlineCode",{parentName:"p"},"useRequest"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"useWatcher"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"useFetcher"),", which will be continuously updated during the download process. this state."),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{label:"vue",value:"1",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},"<template>\n  <div>File size: {{ downloading.total }}B</div>\n  <div>Downloaded: {{ downloading.loaded }}B</div>\n  <div>Progress: {{ downloading.loaded / downloading.total * 100 }}%</div>\n</template>\n\n<script setup>\n  const downloadGetter = alovaInstance.Get('/tood/downloadfile', {\n    enableDownload: true\n  });\n  const { dowinlading } = useRequest(downloadGetter);\n<\/script>\n"))),(0,o.kt)(r.Z,{label:"react",value:"2",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const downloadGetter = alovaInstance.Get('/tood/downloadfile', {\n  enableDownload: true\n});\n\nconst App = () => {\n  const { dowinlading } = useRequest(downloadGetter);\n  return (\n    <>\n      <div>File size: {downloading.total}B</div>\n      <div>Downloaded: {downloading.loaded}B</div>\n      <div>Progress: {(downloading.loaded / downloading.total) * 100}%</div>\n    </>\n  );\n};\n"))),(0,o.kt)(r.Z,{label:"svelte",value:"3",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},"<script>\n  const downloadGetter = alovaInstance.Get('/tood/downloadfile', {\n    enableDownload: true\n  });\n  const { dowinlading } = useRequest(downloadGetter);\n<\/script>\n\n<div>File size: {downloading.total}B</div>\n<div>Downloaded: {downloading.loaded}B</div>\n<div>Progress: {downloading.loaded / downloading.total * 100}%</div>\n")))),(0,o.kt)("h2",{id:"upload-progress"},"upload progress"),(0,o.kt)("p",null,"The upload progress is used in the same way as the download progress. First, enable the upload progress information through ",(0,o.kt)("inlineCode",{parentName:"p"},"enableUpload"),", and then receive it through the ",(0,o.kt)("inlineCode",{parentName:"p"},"uploading")," response status."),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{label:"vue",value:"1",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},"<template>\n  <div>File size: {{ uploading.total }}B</div>\n  <div>Uploaded: {{ uploading.loaded }}B</div>\n  <div>Progress: {{ uploading.loaded / uploading.total * 100 }}%</div>\n</template>\n\n<script setup>\n  const downloadGetter = alovaInstance.Get('/tood/uploadfile', {\n    enableUpload: true\n  });\n  const { uploading } = useRequest(downloadGetter);\n<\/script>\n"))),(0,o.kt)(r.Z,{label:"react",value:"2",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const downloadGetter = alovaInstance.Get('/tood/uploadfile', {\n  enableUpload: true\n});\n\nconst App = () => {\n  const { uploading } = useRequest(downloadGetter);\n  return (\n    <>\n      <div>File size: {uploading.total}B</div>\n      <div>Uploaded: {uploading.loaded}B</div>\n      <div>Progress: {(uploading.loaded / uploading.total) * 100}%</div>\n    </>\n  );\n};\n"))),(0,o.kt)(r.Z,{label:"svelte",value:"3",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},"<script>\n  const downloadGetter = alovaInstance.Get('/tood/uploadfile', {\n    enableUpload: true\n  });\n  const { uploading } = useRequest(downloadGetter);\n<\/script>\n\n<div>File size: {uploading.total}B</div>\n<div>Uploaded: {uploading.loaded}B</div>\n<div>Progress: {uploading.loaded / uploading.total * 100}%</div>\n")))),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Caution when using the ",(0,o.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"GlobalFetch")," adapter"),(0,o.kt)("p",{parentName:"admonition"},"Due to the limitation of fetch api, the ",(0,o.kt)("strong",{parentName:"p"},"GlobalFetch")," adapter provided by alova does not support upload progress, and more complete request adapters will be provided in the future. At present, if you need to upload the progress, please write your own request adapter. For details, see ",(0,o.kt)("a",{parentName:"p",href:"../advanced/custom-http-adapter"},"Write a Request Adapter"),".")),(0,o.kt)("h2",{id:"uploaddownload-status-type"},"upload/download status type"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"type Progress = {\n  /** The total amount of data uploaded or downloaded */\n  total: number;\n  /** Completed data */\n  loaded: number;\n};\n")))}m.isMDXComponent=!0}}]);