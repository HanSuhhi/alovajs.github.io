import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as l,f as a}from"./app.4763b10d.js";const o={},d=a('<h2 id="什么是请求场景管理" tabindex="-1"><a class="header-anchor" href="#什么是请求场景管理" aria-hidden="true">#</a> 什么是请求场景管理</h2><p>我们在进行一次请求时总是要思考以下问题，</p><ol><li>什么时候发出请求；</li><li>是否要展示请求状态；</li><li>是否要封装成请求函数以便重复调用；</li><li>要如何加工响应数据；</li><li>是否要对高频使用的响应数据做缓存；</li><li>如何进行跨页面操作数据；</li><li>离线了还能提交数据吗；</li><li>...</li></ol><p><code>fetch</code>或<code>axios</code>往往更专注于如何与服务端交互，但对于上面的问题我们总是需要自己处理，这些有利于应用性能和稳定性的功能，总会让程序员们编写出低维护性的代码。请求场景管理就是从准备请求到响应数据加工完毕的所有环节进行抽象，从而覆盖以前端为视角的，整个 CS 交互生命周期的模型。<code>alova</code>就是一个以请求场景模型的请求场景管理库，它是对<code>axios</code>等请求库的一种补充，而非替代品。</p><blockquote><p>CS 交互：泛指所有客户端类型和服务端的数据交互</p></blockquote><h2 id="请求场景模型" tabindex="-1"><a class="header-anchor" href="#请求场景模型" aria-hidden="true">#</a> 请求场景模型</h2><p><img src="https://user-images.githubusercontent.com/29848971/185773583-a884e1ed-7507-4e96-9030-f20aa557eb5a.png" alt="model" loading="lazy"></p><h2 id="请求时机" tabindex="-1"><a class="header-anchor" href="#请求时机" aria-hidden="true">#</a> 请求时机</h2><p>描述在什么时候需要发出请求，在<code>alova</code>中以<code>useHook</code>实现。</p><ul><li>初始化展示数据，如刚进入某个界面或子界面；</li><li>人机交互触发 CS 交互，需要变更数据重新发出请求，如翻页、筛选、排序、模糊搜索等；</li><li>预加载数据，如分页内预先加载下一页内容、预测用户点击某个按钮后预先拉取数据；</li><li>操作服务端数据，需发出增删改查请求，如提交数据、删除数据等；</li><li>同步服务端状态，如数据变化较快的场景下轮询请求、操作了某个数据后重新拉取数据；</li></ul><h2 id="请求行为" tabindex="-1"><a class="header-anchor" href="#请求行为" aria-hidden="true">#</a> 请求行为</h2><p>描述以怎样的方式处理请求，在<code>alova</code>中以 method 对象实现。</p><ul><li>占位请求，请求时展示 loading、骨架图、或者是上次使用的真实数据；</li><li>缓存高频响应，多次执行请求会使用保鲜数据；</li><li>多请求串行与并行；</li><li>对频繁的请求进行防抖，避免前端数据闪动，以及降低服务端压力；</li><li>重要接口重试机制，降低网络不稳定造成的请求失败概率；</li><li>静默提交，当只关心提交数据时，提交请求后直接响应成功事件，后台保证请求成功；</li><li>离线提交，离线时将提交数据暂存到本地，网络连接后再提交；</li></ul><h2 id="请求事件" tabindex="-1"><a class="header-anchor" href="#请求事件" aria-hidden="true">#</a> 请求事件</h2><p>表示携带请求参数发送请求，获得响应，<code>alova</code>可以与<code>axios</code>、<code>fetch</code>、<code>XMLHttpRequest</code>等任意请求库或原生方案共同协作。</p><h2 id="响应数据管理" tabindex="-1"><a class="header-anchor" href="#响应数据管理" aria-hidden="true">#</a> 响应数据管理</h2><p><code>alova</code>将响应数据状态化，并统一管理，任何位置都可以对响应数据进行操作，并利用 MVVM 库的特性自动更新对应的视图。</p><ul><li>移除缓存响应数据，再次发起请求时将从服务端拉取；</li><li>更新缓存响应数据，可更新任意位置响应数据，非常有利于跨页面更新数据；</li><li>刷新响应数据，可重新刷新任意位置的响应数据，也非常有利于跨页面更新数据；</li><li>自定义设置缓存，在请求批量数据时，可手动对批量数据一一设置缓存，从而满足后续单条数据的缓存命中；</li></ul>',18),c=[d];function r(t,h){return i(),l("div",null,c)}const p=e(o,[["render",r],["__file","RSM.html.vue"]]);export{p as default};
