import{_ as c}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as r,d as u,w as a,f as l,r as d,a as n,b as s}from"./app.4763b10d.js";const v={},k=l('<p>在接下来的入门指南中，我们将以待办事项（todo）为例，围绕着获取不同日期的待办事项列表、查看 todo 详情，以及创建、编辑、删除事项等需求进行<code>alova</code>的讲解。让我们开始吧！</p><h2 id="创建alova实例" tabindex="-1"><a class="header-anchor" href="#创建alova实例" aria-hidden="true">#</a> 创建Alova实例</h2><p>一个<code>alova</code>实例是使用的开端，所有的请求都需要从它开始。它的写法类似<code>axios</code>，以下是一个最简单的<code>alova</code>实例的创建方法。</p>',3),m=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" createAlova "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'alova'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(" GlobalFetch "),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'alova/GlobalFetch'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(" VueHook "),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'alova/vue'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(" alovaInstance "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"createAlova"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token comment"},"// 假设我们需要与这个域名的服务器交互"),s(`
	`),n("span",{class:"token literal-property property"},"baseURL"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'https://api.alovajs.org'"),n("span",{class:"token punctuation"},","),s(`

	`),n("span",{class:"token comment"},"// VueHook可以帮我们用vue的ref函数创建请求相关的，可以被Alova管理的状态，包括请求状态loading、响应数据data、请求错误对象error等（后续详细介绍）"),s(`
	`),n("span",{class:"token literal-property property"},"statesHook"),n("span",{class:"token operator"},":"),s(" VueHook"),n("span",{class:"token punctuation"},","),s(`
	`),n("span",{class:"token comment"},"// 请求适配器，我们推荐并提供了fetch请求适配器"),s(`
	`),n("span",{class:"token literal-property property"},"requestAdapter"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"GlobalFetch"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" createAlova "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'alova'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(" GlobalFetch "),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'alova/GlobalFetch'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(" ReactHook "),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'alova/react'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(" alovaInstance "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"createAlova"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token comment"},"// 假设我们需要与这个域名的服务器交互"),s(`
	`),n("span",{class:"token literal-property property"},"baseURL"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'https://api.alovajs.org'"),n("span",{class:"token punctuation"},","),s(`

	`),n("span",{class:"token comment"},"// ReactHook可以帮我们调用useState创建请求相关的，可以被Alova管理的状态，包括请求状态loading、响应数据data、请求错误对象error等（后续详细介绍）"),s(`
	`),n("span",{class:"token literal-property property"},"statesHook"),n("span",{class:"token operator"},":"),s(" ReactHook"),n("span",{class:"token punctuation"},","),s(`
	`),n("span",{class:"token comment"},"// 请求适配器，我们推荐并提供了fetch请求适配器"),s(`
	`),n("span",{class:"token literal-property property"},"requestAdapter"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"GlobalFetch"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" createAlova "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'alova'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(" GlobalFetch "),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'alova/GlobalFetch'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(" SvelteHook "),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'alova/svelte'"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(" alovaInstance "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"createAlova"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token comment"},"// 假设我们需要与这个域名的服务器交互"),s(`
	`),n("span",{class:"token literal-property property"},"baseURL"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'https://api.alovajs.org'"),n("span",{class:"token punctuation"},","),s(`

	`),n("span",{class:"token comment"},"// SvelteHook可以帮我们调用writable创建请求相关的，可以被Alova管理的状态，包括请求状态loading、响应数据data、请求错误对象error等（后续详细介绍）"),s(`
	`),n("span",{class:"token literal-property property"},"statesHook"),n("span",{class:"token operator"},":"),s(" SvelteHook"),n("span",{class:"token punctuation"},","),s(`
	`),n("span",{class:"token comment"},"// 请求适配器，我们推荐并提供了fetch请求适配器"),s(`
	`),n("span",{class:"token literal-property property"},"requestAdapter"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"GlobalFetch"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=l(`<h2 id="设置全局请求拦截器" tabindex="-1"><a class="header-anchor" href="#设置全局请求拦截器" aria-hidden="true">#</a> 设置全局请求拦截器</h2><p>通常，我们需要让所有请求都用上相同的配置，例如添加 token、timestamp 到请求头，<code>alova</code>为我们提供了全局的请求拦截器，它将在请求前被触发，我们可以在此拦截器中统一设置请求参数，这也与<code>axios</code>相似。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> alovaInstance <span class="token operator">=</span> <span class="token function">createAlova</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
	<span class="token comment">// 函数参数config内包含了url、params、data、headers等请求的所有配置</span>
	<span class="token function">beforeRequest</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 假设我们需要添加token到请求头</span>
		config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>token <span class="token operator">=</span> <span class="token string">&#39;token&#39;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="设置全局响应拦截器" tabindex="-1"><a class="header-anchor" href="#设置全局响应拦截器" aria-hidden="true">#</a> 设置全局响应拦截器</h2><p>当我们希望统一解析响应数据、统一处理错误时，此时可以在创建<code>alova</code>实例时指定全局的响应拦截器，这同样与<code>axios</code>相似。响应拦截器包括请求成功的拦截器和请求失败的拦截器。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> alovaInstance <span class="token operator">=</span> <span class="token function">createAlova</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
	<span class="token comment">// 使用数组的两个项，分别指定请求成功的拦截器和请求失败的拦截器</span>
	<span class="token literal-property property">responsed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token comment">// 请求成功的拦截器</span>
		<span class="token comment">// 当使用GlobalFetch请求适配器时，第一个参数接收Response对象</span>
		<span class="token comment">// 第二个参数为请求的配置，它用于同步请求前后的配置信息</span>
		<span class="token function-variable function">onSuccess</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">response<span class="token punctuation">,</span> config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>json<span class="token punctuation">.</span>code <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 抛出错误或返回reject状态的Promise实例时，此请求将抛出错误</span>
				<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>

			<span class="token comment">// 解析的响应数据将传给staleTime、persistTime、transformData三个钩子函数，这些函数将在后续讲解</span>
			<span class="token keyword">return</span> json<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>

		<span class="token comment">// 请求失败的拦截器</span>
		<span class="token comment">// 请求错误时将会进入该拦截器。</span>
		<span class="token comment">// 第二个参数为请求的配置，它用于同步请求前后的配置信息</span>
		<span class="token function-variable function">onError</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token function">alert</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不需要设置请求失败的拦截器，可以直接传入请求成功的拦截器函数，而不再需要通过对象来设置回调。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> alovaInstance <span class="token operator">=</span> <span class="token function">createAlova</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
	<span class="token keyword">async</span> <span class="token function">responsed</span><span class="token punctuation">(</span><span class="token parameter">response<span class="token punctuation">,</span> config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 请求成功的拦截器</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">特别注意</p><ol><li>onError回调是请求错误的捕获函数，当捕获错误但没有抛出错误或返回reject状态的Promise实例，将认为请求是成功的，且不会获得响应数据</li><li>responsed可设为是普通函数和异步函数</li></ol></div><h2 id="设置全局请求超时时间" tabindex="-1"><a class="header-anchor" href="#设置全局请求超时时间" aria-hidden="true">#</a> 设置全局请求超时时间</h2><p>以下为设置全局的请求超时时间。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 全局设置请求超时时间</span>
<span class="token keyword">const</span> alovaInstance <span class="token operator">=</span> <span class="token function">createAlova</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
	<span class="token comment">// 请求超时时间，单位为毫秒，默认为0，表示永不超时</span>
	<span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">50000</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function y(f,w){const i=d("Tabs");return p(),r("div",null,[k,u(i,{id:"9",data:[{title:"vue"},{title:"react"},{title:"svelte"}]},{tab0:a(({title:t,value:e,isActive:o})=>[m]),tab1:a(({title:t,value:e,isActive:o})=>[h]),tab2:a(({title:t,value:e,isActive:o})=>[b]),_:1}),g])}const A=c(v,[["render",y],["__file","start.html.vue"]]);export{A as default};
