import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as p,a as s,b as n,d as o,f as c,r as l}from"./app.4763b10d.js";const i={},u=c(`<p>还记得你如何创建一个Alova实例吗？在调用<code>createAlova</code>时必须传入<code>requestAdapter</code>，这个就是<code>alova</code>的请求适配器，试想当<code>alova</code>运行在非浏览器环境时（可能是客户端、小程序），<code>fetch api</code>可能不再可用，那我们就需要更换一个支持当前环境的请求适配器。</p><p>那应该如何自定义一个请求适配器呢？很简单，它其实是一个函数，在每次发起请求时都会调用此函数，并返回一个对象，这个对象内包含如<code>url</code>、<code>method</code>、<code>data</code>、<code>headers</code>、<code>timeout</code>等请求相关的数据集合，虽然字段较多，但我们只需访问我们需要的数据即可。</p><p>请求适配器的参数类型，以及支持Typescript的写法，可以 <a href="#%E8%AF%B7%E6%B1%82%E9%80%82%E9%85%8D%E5%99%A8%E7%B1%BB%E5%9E%8B">点此查看说明</a>。</p><p>一个简单的请求适配器是这样的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">customRequestAdapter</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 解构出需要用到的数据</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    url<span class="token punctuation">,</span>
    method<span class="token punctuation">,</span>
    data<span class="token punctuation">,</span>
    headers<span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> config<span class="token punctuation">;</span>

  <span class="token comment">// 发送请求</span>
  <span class="token keyword">const</span> fetchPromise <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> method<span class="token punctuation">,</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> headers<span class="token punctuation">,</span>
    <span class="token literal-property property">body</span><span class="token operator">:</span> data<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 返回一个包含请求操作相关的对象</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">response</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> fetchPromise<span class="token punctuation">,</span>
    <span class="token function-variable function">headers</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> fetchPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">abort</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// TODO: 中断请求...</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">onDownload</span><span class="token operator">:</span> <span class="token parameter">updateDownloadProgress</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> loaded <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">updateDownloadProgress</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> loaded <span class="token operator">+=</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>loaded <span class="token operator">&gt;=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">onUpload</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">updateUploadProgress</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> loaded <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">updateUploadProgress</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> loaded <span class="token operator">+=</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>loaded <span class="token operator">&gt;=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求适配器的返回值说明：</p><ol><li>【必填】response函数：一个异步函数，函数返回响应值，它将会传递给全局的响应拦截器responsed；</li><li>【必填】headers函数：一个异步函数，函数返回的响应头对象将传递给Method实例的transformData转换钩子函数；</li><li>【必填】abort函数：一个普通函数，它用于中断请求，在 <a href="#%E6%89%8B%E5%8A%A8%E4%B8%AD%E6%96%AD%E8%AF%B7%E6%B1%82">手动中断请求</a> 章节中调用<code>abort</code>函数时，实际上触发中断请求的函数就是这个中断函数；</li><li>【可选】onDownload函数：一个普通函数，它接收一个更新下载进度的回调函数，在此函数内自定义进度更新的频率，在此示例中模拟每隔100毫秒更新一次。<code>updateDownloadProgress</code>回调函数接收两个参数，第一个参数是总大小，第二个参数是已下载大小；</li><li>【可选】onUpload函数：一个普通函数，它接收一个更新上传进度的回调函数，在此函数内自定义进度更新的频率，在此示例中模拟每隔100毫秒更新一次。<code>updateUploadProgress</code>回调函数接收两个参数，第一个参数是总大小，第二个参数是已上传大小；</li></ol>`,7),r={href:"https://github.com/JOU-amjs/alova/blob/main/src/predefine/GlobalFetch.ts",target:"_blank",rel:"noopener noreferrer"};function d(k,v){const a=l("ExternalLinkIcon");return e(),p("div",null,[u,s("p",null,[n("建议你可以查阅 "),s("a",r,[n("GlobalFetch源码"),o(a)]),n(" 来了解更多关于请求适配器的细节。")])])}const f=t(i,[["render",d],["__file","custom-http-adapter.html.vue"]]);export{f as default};
