import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,f as t}from"./app.4763b10d.js";const p={},e=t(`<p>假设你想要进一步提高创建todo项的体验感，让用户点击“创建”按钮后立即生效，而感觉不到提交服务器的过程，你可以考虑使用静默提交的方式。</p><p>你可能会想，服务器没有响应就可以把结果呈现给用户了吗？是的，<code>alova</code>具有后台请求可靠机制，在网络连接环境下间隔2秒重复发起请求，直到请求顺利完成，这在服务提供不稳定的时候很有效，当然，还是需要提醒你的是，不稳定的情况下，如果你的数据在多端展示时，可能就会有点不同步了。</p><p>我们来展示一下静默创建todo项的代码。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">createTodoPoster</span> <span class="token operator">=</span> <span class="token parameter">newTodo</span> <span class="token operator">=&gt;</span> alovaInstance<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">&#39;/todo/create&#39;</span><span class="token punctuation">,</span> newTodo<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span>
  send<span class="token punctuation">,</span>
  onSuccess
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>createTodoPoster<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在请求时开启静默提交</span>
  <span class="token literal-property property">silent</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 设置为静默提交后，onSuccess将会立即被调用，并且回调函数的第一个参数为undefined</span>
  <span class="token comment">// 而onError将永远不会被调用</span>
  <span class="token comment">// 立即将新todo项添加到列表中</span>
  <span class="token function">updateState</span><span class="token punctuation">(</span>todoListGetter<span class="token punctuation">,</span> <span class="token parameter">todoList</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token operator">...</span>todoList<span class="token punctuation">,</span> newTodo<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 点击创建按钮触发此函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;test todo&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token string">&#39;12:00&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的静默提交会有一个问题，就是新的todo项没有id，而id一般需要等提交返回才行，此时我们可以使用延迟数据更新。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 省略其他代码...</span>
<span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">updateState</span><span class="token punctuation">(</span>todoListGetter<span class="token punctuation">,</span> <span class="token parameter">todoList</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
    <span class="token operator">...</span>todoList<span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token comment">// id设为占位符，等待响应后将自动替换为实际数据</span>
      <span class="token string-property property">&#39;+id&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> id <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> id<span class="token punctuation">,</span>
      <span class="token operator">...</span>newTodo
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>深入了解<a href="#%E5%BB%B6%E8%BF%9F%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0">延迟数据更新</a></p><h2 id="离线提交" tabindex="-1"><a class="header-anchor" href="#离线提交" aria-hidden="true">#</a> 离线提交</h2><p>如果你正在开发一个在线文档编写器，用户的每次输入都需要自动同步到服务端，即使是离线状态下也支持用户继续编写，在这种场景下，我们可以使用<code>alova</code>的离线提交机制，其实这个功能和静默提交功能是一体化的，都是得益于<code>alova</code>的后台请求可靠机制。</p><p>它的处理方式是，当开启了静默提交后，在离线状态时提交数据会直接将请求数据缓存在本地，等到网络恢复后，会自动将缓存的请求数据重新提交到服务端，这就保证了离线状态下的静默提交也是可靠的。</p><p>接下来我们以在线文档编写器为示例，展示一下离线提交的代码。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> editingText <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">saveDoc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> alovaInstance<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">&#39;/doc/save&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">text</span><span class="token operator">:</span> editingText<span class="token punctuation">.</span>value
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>
  loading
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useWatcher</span><span class="token punctuation">(</span>saveDoc<span class="token punctuation">,</span> <span class="token punctuation">[</span>editingText<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// 开启静默提交</span>
  <span class="token literal-property property">silent</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>

  <span class="token comment">// 设置500ms防抖降低服务器压力</span>
  <span class="token literal-property property">debounce</span><span class="token operator">:</span> <span class="token number">500</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>loading<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>提交中...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>editingText<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就完成了简单的在线文档编写器。当然，在静默提交创建todo项的例子中离线提交也是适用的，即在离线状态下也能保证顺利创建todo项。</p>`,14),o=[e];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","silent-offline-submit.html.vue"]]);export{d as default};
