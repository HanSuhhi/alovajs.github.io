import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as s,f as e}from"./app.4763b10d.js";const t={},o=e(`<p>当我们在处理完一些业务时，需要调用<code>invalidateCache</code>、<code>setCacheData</code>、<code>updateState</code>和<code>fetch</code>来失效缓存、更新缓存、跨页面更新状态、或重新拉取数据，一般会有两种场景：</p><ol><li>开发者知道需要操作哪个请求的数据，此时在调用上面的函数时直接传入一个<code>Method</code>实例即可；</li><li>开发者只知道需要操作某个顺序位的请求，而不确定具体哪个，此时我们就可以使用<code>Method</code>实例匹配器的方式过滤出来。</li></ol><p><code>Method</code>实例匹配器是依据<code>Method</code>实例设置的<code>name</code>属性来过滤的，多个匹配器允许设置相同的<code>name</code>，因此首先需要为需要过滤的<code>Method</code>实例设置<code>name</code>属性。</p><p>Method实例匹配类型如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MethodFilter</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> RegExp <span class="token operator">|</span> <span class="token punctuation">{</span>
	name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> RegExp<span class="token punctuation">,</span>
	<span class="token function-variable function">filter</span><span class="token operator">:</span> <span class="token punctuation">(</span>method<span class="token operator">:</span> Method<span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> methods<span class="token operator">:</span> Method<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>

	<span class="token comment">// 可选参数，如果传入alova对象则只匹配此alova所创建的Method实例，否则匹配所有alova实例的Method实例</span>
	alova<span class="token operator">?</span><span class="token operator">:</span> Alova
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="通过name属性匹配" tabindex="-1"><a class="header-anchor" href="#通过name属性匹配" aria-hidden="true">#</a> 通过name属性匹配</h2><p>通过传入完整的实例名称进行匹配，它的匹配结果是一个数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 每次调用getTodoList时都会生成一个新的Method实例，它们的name是相同的</span>
<span class="token keyword">const</span> <span class="token function-variable function">getTodoList</span> <span class="token operator">=</span> <span class="token parameter">currentPage</span> <span class="token operator">=&gt;</span>
	alova<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&#39;/tood/list&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;todoList&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			currentPage<span class="token punctuation">,</span>
			<span class="token literal-property property">pageSize</span><span class="token operator">:</span> <span class="token number">10</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 以下表示让name为&#39;todoList&#39;的所有Method实例的缓存失效</span>
<span class="token function">invalidateCache</span><span class="token punctuation">(</span><span class="token string">&#39;todoList&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="通过正则表达式匹配" tabindex="-1"><a class="header-anchor" href="#通过正则表达式匹配" aria-hidden="true">#</a> 通过正则表达式匹配</h2><p>通过传入正则表达式进行匹配，Method实例的name符合正则表达式的都将匹配，它的结果也是一个数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 以下表示让name为以&#39;todo&#39;开头的所有Method实例的缓存失效</span>
<span class="token function">invalidateCache</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^todo</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="更复杂的匹配方式" tabindex="-1"><a class="header-anchor" href="#更复杂的匹配方式" aria-hidden="true">#</a> 更复杂的匹配方式</h2><p>你也可以指定<code>filter</code>来进一步过滤不满足条件的<code>Method</code>实例，filter函数使用与Array.prototype.filter相同，返回 true 表示匹配成功，返回 false 表示失败，详见上面的类型声明。</p><p>让我们来看几个例子。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 让name为todoList的最后一个Method实例的缓存失效 </span>
<span class="token function">invalidateCache</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;todoList&#39;</span><span class="token punctuation">,</span>
	<span class="token function-variable function">filter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">method<span class="token punctuation">,</span> index<span class="token punctuation">,</span> methods</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> index <span class="token operator">===</span> methods<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 设置name为todo开头的最后一个Method实例的缓存</span>
<span class="token function">setCacheData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^todo</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
	<span class="token function-variable function">filter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">method<span class="token punctuation">,</span> index<span class="token punctuation">,</span> methods</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> index <span class="token operator">===</span> methods<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>

  <span class="token comment">// 如果传了alova参数，那么只匹配由此alova实例创建的Method实例，否则会在所有Method实例中匹配</span>
	<span class="token literal-property property">alova</span><span class="token operator">:</span> alovaInst
<span class="token punctuation">}</span><span class="token punctuation">,</span> newCache<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 重新拉取todo列表最后一次请求的数据</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> fetch <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFetcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;todoList&#39;</span><span class="token punctuation">,</span>
	<span class="token function-variable function">filter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">method<span class="token punctuation">,</span> index<span class="token punctuation">,</span> methods</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> index <span class="token operator">===</span> methods<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>alova参数可进一步缩小匹配范围。</p></blockquote><h2 id="在不同函数中使用的区别" tabindex="-1"><a class="header-anchor" href="#在不同函数中使用的区别" aria-hidden="true">#</a> 在不同函数中使用的区别</h2><ul><li>invalidateCache：应用所有匹配的Method实例集合，即失效所有匹配的Method实例对应的缓存；</li><li>setCacheData：应用所有匹配的Method实例集合，当传入静态数据时所有的Method实例缓存设置为相同值，传入回调函数时将循环调用此函数，并将返回值作为缓存数据；</li><li>updateState：应用第一个匹配的Method实例</li><li>fetch：应用第一个匹配的Method实例，即只会拉取一次数据 <code>invalidateCache</code>会失效所有过滤出来的<code>Method</code>实例所对应的缓存，而<code>updateState</code>和<code>fetch</code>只会使用<code>Method</code>实例集合中的第一个项进行操作。</li></ul>`,18),p=[o];function c(l,i){return a(),s("div",null,p)}const u=n(t,[["render",c],["__file","method-instance-matcher.html.vue"]]);export{u as default};
